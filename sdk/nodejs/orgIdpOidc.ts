// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource representing a generic OIDC IdP on the organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zitadel from "@pulumi/zitadel";
 *
 * const oidcIdp = new zitadel.OrgIdpOidc("oidcIdp", {
 *     orgId: zitadel_org.org.id,
 *     stylingType: "STYLING_TYPE_UNSPECIFIED",
 *     clientId: "google",
 *     clientSecret: "google_secret",
 *     issuer: "https://google.com",
 *     scopes: [
 *         "openid",
 *         "profile",
 *         "email",
 *     ],
 *     displayNameMapping: "OIDC_MAPPING_FIELD_PREFERRED_USERNAME",
 *     usernameMapping: "OIDC_MAPPING_FIELD_PREFERRED_USERNAME",
 *     autoRegister: false,
 * });
 * ```
 */
export class OrgIdpOidc extends pulumi.CustomResource {
    /**
     * Get an existing OrgIdpOidc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgIdpOidcState, opts?: pulumi.CustomResourceOptions): OrgIdpOidc {
        return new OrgIdpOidc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zitadel:index/orgIdpOidc:OrgIdpOidc';

    /**
     * Returns true if the given object is an instance of OrgIdpOidc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrgIdpOidc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrgIdpOidc.__pulumiType;
    }

    /**
     * auto register for users from this idp
     */
    public readonly autoRegister!: pulumi.Output<boolean>;
    /**
     * client id generated by the identity provider
     */
    public readonly clientId!: pulumi.Output<string>;
    /**
     * client secret generated by the identity provider
     */
    public readonly clientSecret!: pulumi.Output<string>;
    /**
     * definition which field is mapped to the display name of the user
     */
    public readonly displayNameMapping!: pulumi.Output<string>;
    /**
     * the oidc issuer of the identity provider
     */
    public readonly issuer!: pulumi.Output<string>;
    /**
     * Name of the IDP
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the organization
     */
    public readonly orgId!: pulumi.Output<string>;
    /**
     * the scopes requested by ZITADEL during the request on the identity provider
     */
    public readonly scopes!: pulumi.Output<string[]>;
    /**
     * Some identity providers specify the styling of the button to their login, supported values: STYLING*TYPE*UNSPECIFIED, STYLING*TYPE*GOOGLE
     */
    public readonly stylingType!: pulumi.Output<string>;
    /**
     * definition which field is mapped to the email of the user
     */
    public readonly usernameMapping!: pulumi.Output<string>;

    /**
     * Create a OrgIdpOidc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrgIdpOidcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrgIdpOidcArgs | OrgIdpOidcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrgIdpOidcState | undefined;
            resourceInputs["autoRegister"] = state ? state.autoRegister : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["displayNameMapping"] = state ? state.displayNameMapping : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["stylingType"] = state ? state.stylingType : undefined;
            resourceInputs["usernameMapping"] = state ? state.usernameMapping : undefined;
        } else {
            const args = argsOrState as OrgIdpOidcArgs | undefined;
            if ((!args || args.autoRegister === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoRegister'");
            }
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.clientSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientSecret'");
            }
            if ((!args || args.displayNameMapping === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayNameMapping'");
            }
            if ((!args || args.issuer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuer'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if ((!args || args.scopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            if ((!args || args.stylingType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stylingType'");
            }
            if ((!args || args.usernameMapping === undefined) && !opts.urn) {
                throw new Error("Missing required property 'usernameMapping'");
            }
            resourceInputs["autoRegister"] = args ? args.autoRegister : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientSecret"] = args ? args.clientSecret : undefined;
            resourceInputs["displayNameMapping"] = args ? args.displayNameMapping : undefined;
            resourceInputs["issuer"] = args ? args.issuer : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["stylingType"] = args ? args.stylingType : undefined;
            resourceInputs["usernameMapping"] = args ? args.usernameMapping : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrgIdpOidc.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrgIdpOidc resources.
 */
export interface OrgIdpOidcState {
    /**
     * auto register for users from this idp
     */
    autoRegister?: pulumi.Input<boolean>;
    /**
     * client id generated by the identity provider
     */
    clientId?: pulumi.Input<string>;
    /**
     * client secret generated by the identity provider
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * definition which field is mapped to the display name of the user
     */
    displayNameMapping?: pulumi.Input<string>;
    /**
     * the oidc issuer of the identity provider
     */
    issuer?: pulumi.Input<string>;
    /**
     * Name of the IDP
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * the scopes requested by ZITADEL during the request on the identity provider
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Some identity providers specify the styling of the button to their login, supported values: STYLING*TYPE*UNSPECIFIED, STYLING*TYPE*GOOGLE
     */
    stylingType?: pulumi.Input<string>;
    /**
     * definition which field is mapped to the email of the user
     */
    usernameMapping?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrgIdpOidc resource.
 */
export interface OrgIdpOidcArgs {
    /**
     * auto register for users from this idp
     */
    autoRegister: pulumi.Input<boolean>;
    /**
     * client id generated by the identity provider
     */
    clientId: pulumi.Input<string>;
    /**
     * client secret generated by the identity provider
     */
    clientSecret: pulumi.Input<string>;
    /**
     * definition which field is mapped to the display name of the user
     */
    displayNameMapping: pulumi.Input<string>;
    /**
     * the oidc issuer of the identity provider
     */
    issuer: pulumi.Input<string>;
    /**
     * Name of the IDP
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the organization
     */
    orgId: pulumi.Input<string>;
    /**
     * the scopes requested by ZITADEL during the request on the identity provider
     */
    scopes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Some identity providers specify the styling of the button to their login, supported values: STYLING*TYPE*UNSPECIFIED, STYLING*TYPE*GOOGLE
     */
    stylingType: pulumi.Input<string>;
    /**
     * definition which field is mapped to the email of the user
     */
    usernameMapping: pulumi.Input<string>;
}
