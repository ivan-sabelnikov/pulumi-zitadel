// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource representing triggers, when actions get started
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zitadel from "@vavsab/zitadel";
 *
 * const triggerActions = new zitadel.TriggerActions("triggerActions", {
 *     orgId: zitadel_org.org.id,
 *     flowType: "FLOW_TYPE_EXTERNAL_AUTHENTICATION",
 *     triggerType: "TRIGGER_TYPE_POST_AUTHENTICATION",
 *     actionIds: [zitadel_action.action.id],
 * });
 * ```
 */
export class TriggerActions extends pulumi.CustomResource {
    /**
     * Get an existing TriggerActions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TriggerActionsState, opts?: pulumi.CustomResourceOptions): TriggerActions {
        return new TriggerActions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zitadel:index/triggerActions:TriggerActions';

    /**
     * Returns true if the given object is an instance of TriggerActions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TriggerActions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TriggerActions.__pulumiType;
    }

    /**
     * IDs of the triggered actions
     */
    public readonly actionIds!: pulumi.Output<string[]>;
    /**
     * Type of the flow to which the action triggers belong, supported values: , FLOW*TYPE*EXTERNAL*AUTHENTICATION, FLOW*TYPE*CUSTOMISE*TOKEN
     */
    public readonly flowType!: pulumi.Output<string>;
    /**
     * ID of the organization
     */
    public readonly orgId!: pulumi.Output<string>;
    /**
     * Trigger type on when the actions get triggered, supported values: , TRIGGER*TYPE*POST*AUTHENTICATION, TRIGGER*TYPE*PRE*CREATION, TRIGGER*TYPE*POST*CREATION, TRIGGER*TYPE*PRE*USERINFO_CREATION
     */
    public readonly triggerType!: pulumi.Output<string>;

    /**
     * Create a TriggerActions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TriggerActionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TriggerActionsArgs | TriggerActionsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TriggerActionsState | undefined;
            resourceInputs["actionIds"] = state ? state.actionIds : undefined;
            resourceInputs["flowType"] = state ? state.flowType : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["triggerType"] = state ? state.triggerType : undefined;
        } else {
            const args = argsOrState as TriggerActionsArgs | undefined;
            if ((!args || args.actionIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actionIds'");
            }
            if ((!args || args.flowType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flowType'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if ((!args || args.triggerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'triggerType'");
            }
            resourceInputs["actionIds"] = args ? args.actionIds : undefined;
            resourceInputs["flowType"] = args ? args.flowType : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["triggerType"] = args ? args.triggerType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TriggerActions.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TriggerActions resources.
 */
export interface TriggerActionsState {
    /**
     * IDs of the triggered actions
     */
    actionIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of the flow to which the action triggers belong, supported values: , FLOW*TYPE*EXTERNAL*AUTHENTICATION, FLOW*TYPE*CUSTOMISE*TOKEN
     */
    flowType?: pulumi.Input<string>;
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * Trigger type on when the actions get triggered, supported values: , TRIGGER*TYPE*POST*AUTHENTICATION, TRIGGER*TYPE*PRE*CREATION, TRIGGER*TYPE*POST*CREATION, TRIGGER*TYPE*PRE*USERINFO_CREATION
     */
    triggerType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TriggerActions resource.
 */
export interface TriggerActionsArgs {
    /**
     * IDs of the triggered actions
     */
    actionIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of the flow to which the action triggers belong, supported values: , FLOW*TYPE*EXTERNAL*AUTHENTICATION, FLOW*TYPE*CUSTOMISE*TOKEN
     */
    flowType: pulumi.Input<string>;
    /**
     * ID of the organization
     */
    orgId: pulumi.Input<string>;
    /**
     * Trigger type on when the actions get triggered, supported values: , TRIGGER*TYPE*POST*AUTHENTICATION, TRIGGER*TYPE*PRE*CREATION, TRIGGER*TYPE*POST*CREATION, TRIGGER*TYPE*PRE*USERINFO_CREATION
     */
    triggerType: pulumi.Input<string>;
}
